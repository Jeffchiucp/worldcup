#!/usr/bin/env node
/*jshint node:true*/
'use strict';
var http = require('http'),
    program = require('commander'),
    config = require('../package.json'),
    moment = require('moment'),
    sortBy = require('lodash.sortby');

var WHITE = '\x1B[37m', GREEN = '\x1B[32m', GRAY = '\x1B[90m', CLEAR = '\x1B[m', SOCCER = '\u26BD';

function get(category, callback) {
    var uri = 'http://worldcup.sfg.io/matches/{category}';
    http.get(uri.replace('{category}', category), 
        function(res) {
            var data = '';
            res.on('data', function (chunk) {
                data += chunk;
            });
            res.on('end', function () {
                try {
                    callback(null, JSON.parse(data));
                } catch(e) {
                    callback(new Error('command option not supported'));
                }
            });
        })
        .on('error', function(e) {
            callback(e.message);
        });
}

function render(match) {
    if(!match) {
        return;
    }
    var matchDate = moment.parseZone(match.datetime),
        now = moment();
    var seconds = Math.floor(now.diff(matchDate) / 1000);
    var color = WHITE;
    var home = match.home_team;
    var away = match.away_team;
    var matchStatus, matchPercentage, result;
    if (match.status === 'future') {
        matchPercentage = 0; // future
        matchStatus = format('Will be played {time}', {time: moment(matchDate.valueOf()).calendar() });
    } else if(match.status === 'in progress') {
        color = GREEN;
        matchPercentage = Math.floor(seconds / 60 / 95 * 100);
        matchStatus = format('Being played now: {minutes} minutes gone', { minutes: Math.floor(seconds / 60) });
    } else {
        color = GREEN;
        matchPercentage = 100;
        if (match.winner === 'Draw') {
            result = 'Draw';
        } else {
            result = format('{winner} won', { winner: match.winner });
            matchStatus = format('Played {time}. {result}', { time: moment(matchDate.valueOf()).calendar(), result: result});
        }
    }
    var output = color + '{header}\n{progress}\n' + CLEAR + '{status}\n\n{goals}\n';
    
    process.stdout.write(format(output, {
        home: home.country,
        homeGoals: home.goals,
        awayGoals: away.goals,
        away: away.country,
        header: renderHeader(match),
        lpad: new Array(28-home.country.length).join(' '),
        rpad: new Array(28-away.country.length).join(' '),
        goals: GRAY + renderGoals(match) + CLEAR,
        progress: renderProgressBar(matchPercentage),
        status: GRAY + matchStatus + CLEAR
    }));
}

function format(tpl, obj) {
    return tpl.replace(/(\{(\w+)\})/g, function() {
        var out = obj[arguments[2]];
        return out === null || out === 'undefined' ? '' : out;
    });
}
function processCategory(category) {
    get(category, function(err, matches) {
        if(err) {
            console.error('could not load remote data', err);
            program.help();
        }
        switch(category) {
            case 'current':
                console.log('Current match:');
                break;
            case 'today':
                console.log('Todayâ€™s matches:');
                break;
            case 'tomorrow':
                console.log('Tomorrowâ€™s matches:');
                break;
        }
        console.log('');
        if(!matches) {
            return console.log('No planned matches.');
        }

        // Matches from worldcup.sfg.io are sorted by match number, which isn't
        // too useful when the matches are not played in the order of their
        // assigned match numbers. A more appropriate way of displaying the
        // matches is in the order in which they are played. Below, the matches
        // are sorted as such.
        matches = sortBy(matches, function(match) {
            return moment(match.datetime).valueOf();
        });

        (matches).forEach(function(match) {
            render(match);
        });
    });
}

function renderHeader(match) {
    var out = '{home}{lpad}{homeGoals} - {awayGoals}{rpad}{away}',
        home = match.home_team,
        away = match.away_team,
        lpad = new Array(28-home.country.length).join(' '),
        rpad = new Array(28-away.country.length).join(' ');

    return format(out, {
        home: home.country,
        homeGoals: home.goals,
        awayGoals: away.goals,
        away: away.country,
        lpad: lpad,
        rpad: rpad
    });
}

function renderProgressBar(percentage) {
    var cursor = percentage > 0 && percentage < 100 ? 'o' : '',
        width = 61;
    var done = Math.floor((width - 1) * percentage / 100),
        remaining = Math.max(width - done - 1, 0);
    return GREEN + new Array(done).join('-') + cursor + CLEAR + WHITE + new Array(remaining).join('-') + CLEAR;
}

function renderGoals(match) {
    var homeEvents = match.home_team_events,
        awayEvents = match.away_team_events,
        homeGoals = [],
        awayGoals = [];
    homeEvents.forEach(function(event) {
        if(event.type_of_event === 'goal') {
            homeGoals.push({
                player: event.player,
                time: event.time
            });
        }
    });
    awayEvents.forEach(function(event) {
        if(event.type_of_event === 'goal') {
            awayGoals.push({
                player: event.player,
                time: event.time
            });
        }
    });
    var maxGoals = Math.max(homeGoals.length, awayGoals.length);
    var out = [], h, a, spacer;
    for(var i = 0; i < maxGoals; i++) {
        h = homeGoals[i];
        h = h ? h.time + '\' ' + SOCCER + '  ' + h.player + ' ' : '';
        a = awayGoals[i];
        a = a ? a.time + '\' ' + SOCCER + '  ' + a.player + ' ' : '';
        spacer = new Array(35 - (h.length + 4));
        out.push('  ' + h + spacer.join(' ') + a + '  ');
    }
    return out.join('\n') + (out.length ? '\n' : '');
}

function init(topics) {
    console.log('');
    (topics.length ? topics : ['today']).forEach(processCategory);
}

////////// MAIN //////////
program.name = config.name;
program
    .version('0.1.0')
    .usage('[current] [today] [tommorow]')
    //.option('-T, --no-tests', 'ignore test hook')
    .parse(process.argv);

init(program.args);
